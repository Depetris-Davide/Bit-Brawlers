<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<link rel="stylesheet" href="style.css">

<body>
    <p> Usa le frecce per muoverti! </p>
    <div id="schermata">

    </div>
    <canvas></canvas>

    <button id="knightButton" onclick="selectClass('knight')">Knight</button>
    <button id="archerButton" onclick="selectClass('archer')">Archer</button>
</body>
<script>
    /*class Sprite {
        constructor({
            id,
            position,
            imageSrc,
            scale = 1,
            framesMax = 1,
            offset = { x: 0, y: 0 }
        }) {
            this.id = id
            this.position = position
            this.width = 50
            this.height = 150
            this.image = new Image()
            this.image.src = imageSrc
            this.scale = scale
            this.framesMax = framesMax
            this.framesCurrent = 0
            this.framesElapsed = 0
            this.framesHold = 5
            this.offset = offset
        }

        draw() {
            c.drawImage(
                this.image,
                this.framesCurrent * (this.image.width / this.framesMax),
                0,
                this.image.width / this.framesMax,
                this.image.height,
                this.position.x - this.offset.x,
                this.position.y - this.offset.y,
                (this.image.width / this.framesMax) * this.scale,
                this.image.height * this.scale
            )
        }

        animateFrames() {
            this.framesElapsed++

            if (this.framesElapsed % this.framesHold === 0) {
                if (this.framesCurrent < this.framesMax - 1) {
                    this.framesCurrent++
                } else {
                    this.framesCurrent = 0
                }
            }
        }

        update() {
            this.draw()
            this.animateFrames()
        }
    }

    class Fighter extends Sprite {
        constructor({
            id,
            position,
            velocity,
            color = 'red',
            imageSrc,
            scale = 1,
            framesMax = 1,
            offset = { x: 0, y: 0 },
            sprites,
            attackBox = { offset: {}, width: undefined, height: undefined }
        }) {
            super({
                id,
                position,
                imageSrc,
                scale,
                framesMax,
                offset
            })

            this.velocity = velocity
            this.width = 50
            this.height = 150
            this.lastKey
            this.attackBox = {
                position: {
                    x: this.position.x,
                    y: this.position.y
                },
                offset: attackBox.offset,
                width: attackBox.width,
                height: attackBox.height
            }
            this.color = color
            this.isAttacking
            this.health = 0
            this.framesCurrent = 0
            this.framesElapsed = 0
            this.framesHold = 8
            this.sprites = sprites
            this.dead = false

            for (const sprite in this.sprites) {
                sprites[sprite].image = new Image()
                sprites[sprite].image.src = sprites[sprite].imageSrc
            }
        }

        update() {

            this.draw()
            if (!this.dead) this.animateFrames()

            // attack boxes
            this.attackBox.position.x = this.position.x + this.attackBox.offset.x
            this.attackBox.position.y = this.position.y + this.attackBox.offset.y

            // draw the attack box
            c.fillRect(
                this.attackBox.position.x,
                this.attackBox.position.y,
                this.attackBox.width,
                this.attackBox.height
            )

            this.position.x += this.velocity.x
            this.position.y += this.velocity.y
        }

        attack() {
            this.switchSprite('attack')
            this.isAttacking = true
        }

        takeHit() {
            this.health -= 20

            if (this.health <= 0) {
                this.switchSprite('death')
            } else this.switchSprite('takeHit')
        }

        switchSprite(sprite) {
            if (this.image === this.sprites.death.image) {
                if (this.framesCurrent === this.sprites.death.framesMax - 1)
                    this.dead = true
                return
            }

            // overriding all other animations with the attack animation
            if (
                this.image === this.sprites.attack1.image &&
                this.framesCurrent < this.sprites.attack1.framesMax - 1
            )
                return

            // override when fighter gets hit
            if (
                this.image === this.sprites.takeHit.image &&
                this.framesCurrent < this.sprites.takeHit.framesMax - 1
            )
                return

            switch (sprite) {
                case 'idle':
                    if (this.image !== this.sprites.idle.image) {
                        this.image = this.sprites.idle.image
                        this.framesMax = this.sprites.idle.framesMax
                        this.framesCurrent = 0
                    }
                    break
                case 'run':
                    if (this.image !== this.sprites.run.image) {
                        this.image = this.sprites.run.image
                        this.framesMax = this.sprites.run.framesMax
                        this.framesCurrent = 0
                    }
                    break

                case 'attack':
                    if (this.image !== this.sprites.attack1.image) {
                        this.image = this.sprites.attack1.image
                        this.framesMax = this.sprites.attack1.framesMax
                        this.framesCurrent = 0
                    }
                    break

                case 'takeHit':
                    if (this.image !== this.sprites.takeHit.image) {
                        this.image = this.sprites.takeHit.image
                        this.framesMax = this.sprites.takeHit.framesMax
                        this.framesCurrent = 0
                    }
                    break

                case 'death':
                    if (this.image !== this.sprites.death.image) {
                        this.image = this.sprites.death.image
                        this.framesMax = this.sprites.death.framesMax
                        this.framesCurrent = 0
                    }
                    break
            }
        }
    }*/

    const canvas = document.querySelector('canvas')
    const c = canvas.getContext('2d')

    canvas.width = 1024
    canvas.height = 576

    c.fillRect(0, 0, canvas.width, canvas.height)

    class Sprite {
        constructor(position) {
            this.position = position
        }

        draw() {
            c.fillStyle = 'red'
            c.fillRect(this.position.x, this.position.y, 50, 150)
        }

        setID
    }

    let webSocket = new WebSocket(window.location.href.replace(/^http/, 'ws'));
    let id;
    let speed = 3
    let players = [
        new Sprite({
            x: 0,
            y: 0
        })
    ]
    console.log(players[0].draw())
    players[0].draw()

    webSocket.addEventListener("open", () => {
        console.log("Connesso al server")
    })

    webSocket.addEventListener("message", (data) => {
        let message = JSON.parse(data.data)
        switch (message.type) {
            case "init":
                id = message.id
                break;
            case "moveSquare":
                let squareToMove = players[message.id].player;
                squareToMove.position.x = message.posX;
                squareToMove.position.y = message.posY;
                break;
        }
    })
    /*
        //Gestione messaggi
        webSocket.addEventListener("message", (data) => {
            let message = JSON.parse(data.data)
            switch (message.type) {
                case "init":
                    id = message.id
                    console.log("ID di questo client: " + id)
                    break;
                case "deleteSquare":
                    let playerIndexToDelete = players.findIndex(playerObj => playerObj.id === message.id);
                    if (playerIndexToDelete !== -1) {
                        players.splice(playerIndexToDelete, 1);
                    }
                    let buttonToEnable = document.getElementById(`${message.id + "Button"}`)
                    buttonToEnable.disabled = "false"
                    break;
                case "moveSquare":
                    let squareToMove = players[message.id].player;
                    squareToMove.position.x = message.posX;
                    squareToMove.position.y = message.posY;
                    break;
                case "disableButton":
                    document.getElementById(message.id + "Button").disabled = 'true'
                    break
                case "clientNotAllowed":
                    window.location.href = "/maximumClients";
                    break;
                case "spawnPlayer":
                    let spriteToSearch;
                    let idleFrames;
                    let runFrames;
                    let attackFrames;
    
                    switch (message.id) {
                        case "knight":
                            spriteToSearch = "./sprites/Knight/";
                            idleFrames = 8;
                            runFrames = 8;
                            attackFrames = 4;
                            break;
                        case "archer":
                            spriteToSearch = "./sprites/Archer/";
                            idleFrames = 10;
                            runFrames = 8;
                            attackFrames = 6;
                            break;
                    }
    
                    let newPlayer = new Fighter({
                        id: message.id,
                        position: {
                            x: message.posX,
                            y: message.posY
                        },
                        velocity: {
                            x: 0,
                            y: 0
                        },
                        offset: {
                            x: 0,
                            y: 0
                        },
                        imageSrc: spriteToSearch + 'Idle.png',
                        framesMax: idleFrames,
                        scale: 2.5,
                        offset: {
                            x: 215,
                            y: 157
                        },
                        sprites: {
                            idle: {
                                imageSrc: spriteToSearch + 'Idle.png',
                                framesMax: idleFrames
                            },
                            run: {
                                imageSrc: spriteToSearch + 'Run.png',
                                framesMax: runFrames
                            },
                            attack1: {
                                imageSrc: spriteToSearch + 'Attack.png',
                                framesMax: attackFrames
                            },
                            takeHit: {
                                imageSrc: spriteToSearch + 'TakeHit.png',
                                framesMax: 4
                            },
                            death: {
                                imageSrc: spriteToSearch + 'Death.png',
                                framesMax: 6
                            }
                        },
                        attackBox: {
                            offset: {
                                x: 100,
                                y: 50
                            },
                            width: 160,
                            height: 50
                        }
                    });
    
                    players[message.id] = {
                        id: message.id,
                        player: newPlayer
                    };
    
                    break;
            }
        })
    
        webSocket.onclose = () => {
            webSocket.close()
        }
    
        const playerKeys = {};
    
        window.addEventListener('keydown', (event) => {
            let currentPlayer = players[id].player;
            if (currentPlayer.id == id) {
                if (!currentPlayer.dead) {
                    if (!playerKeys[id]) {
                        playerKeys[id] = {
                            w: { pressed: false },
                            a: { pressed: false },
                            s: { pressed: false },
                            d: { pressed: false }
                        };
                    }
    
                    switch (event.key) {
                        case 'd':
                            playerKeys[id].d.pressed = true;
                            break;
                        case 'a':
                            playerKeys[id].a.pressed = true;
                            break;
                        case 'w':
                            playerKeys[id].w.pressed = true;
                            break;
                        case 's':
                            playerKeys[id].s.pressed = true;
                            break;
                        case ' ':
                            currentPlayer.attack();
                            break;
                    }
                }
            }
        });
    
        window.addEventListener('keyup', (event) => {
            let currentPlayer = players[id].player;
            if (currentPlayer.id == id) {
                if (!currentPlayer.dead) {
                    switch (event.key) {
                        case 'w':
                            playerKeys[id].w.pressed = false;
                            break;
                        case 'a':
                            playerKeys[id].a.pressed = false;
                            break;
                        case 's':
                            playerKeys[id].s.pressed = false;
                            break;
                        case 'd':
                            playerKeys[id].d.pressed = false;
                            break;
                    }
                }
            }
        });
    
        let currentPlayer;
    
        function animate() {
            let localPlayer; // Variabile locale all'interno di animate()
    
            window.requestAnimationFrame(animate);
            c.fillStyle = 'black';
            c.fillRect(0, 0, canvas.width, canvas.height);
            c.fillStyle = 'rgba(255, 255, 255, 0.15)';
            c.fillRect(0, 0, canvas.width, canvas.height);
    
            Object.values(players).forEach(playerObj => {
                localPlayer = playerObj.player;
                if (localPlayer && !localPlayer.dead) {
                    localPlayer.update();
                    localPlayer.velocity.x = 0;
                    localPlayer.velocity.y = 0;
                }
            });
    
            Object.values(playerKeys).forEach((keys) => {
                if (keys.a.pressed || keys.d.pressed || keys.w.pressed || keys.s.pressed) {
                    if (keys.a.pressed) {
                        localPlayer.velocity.x = -speed;
                    }
                    if (keys.d.pressed) {
                        localPlayer.velocity.x = speed;
                    }
                    if (keys.w.pressed) {
                        localPlayer.velocity.y = -speed;
                    }
                    if (keys.s.pressed) {
                        localPlayer.velocity.y = speed;
                    }
    
                    localPlayer.switchSprite('run');
    
                    let message = {
                        type: "moveSquare",
                        id: id,
                        posX: localPlayer.position.x,
                        posY: localPlayer.position.y,
                    };
                    webSocket.send(JSON.stringify(message));
                } else {
                    localPlayer.switchSprite('idle');
                }
                console.log(localPlayer.velocity.x);
            });
    
            // Aggiorna currentPlayer alla fine di animate()
            currentPlayer = localPlayer;
        }
    
        animate()
    */
    function selectClass(fighter) {
        let message = {
            type: "classSelected",
            id: fighter,
        };

        webSocket.send(JSON.stringify(message))
    }
</script>

</html>